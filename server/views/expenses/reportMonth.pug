extends ../expenses/sidebar.pug

block header
  h1=`${t('layouts.application.expensesReport')} / ${t('layouts.application.byMonth')}, ${t('layouts.application.amount').toLowerCase()}`

block main          
  table.table.table-white.border.border-2.shadow
    thead.text-center
      tr.align-middle
        th.border-end.width-th(rowspan='2')=t('layouts.application.categoriesOfExpenses')      
        th.border-end.width-th(rowspan='2')=t('layouts.application.sourceOfExpenses')
        th.border-end.p-0(colspan=data[queryYear].length)
          +formFor()(action='/reportMonth' method='GET').d-flex.flex-row.formYear
            +selectYear(expenses, 'date', errors)(type="text").selectYear.fw-bold
          script.
            const selectYear = document.querySelector('.selectYear');
            const form = document.querySelector('.formYear');
            selectYear.addEventListener('change', () => {
              form.submit();
            });
        th.border-end.width-th(rowspan='2')=t('layouts.application.total')
        th.width-th(rowspan='2')=t('layouts.application.average')
      tr.align-middle
        each month in data[String(queryYear)]
          th.border-end=month
      tbody.table-group-divider
        - const expensesByYear = (year) => expenses.filter((exp) => Number(year) === new Date(exp.date).getFullYear())
        - const expensesByMonth = (month) => expensesByYear(queryYear).filter((exp) => month === new Date(exp.date).getMonth() + 1)
        
        each source, i in sourcesOfExpenses
          - const category = categories.find((el) => Number(el?.id) === Number(source?.categoryId))
          - const sourcesOfThisCategory = sourcesOfExpenses.filter((source) => source?.categoryId === category?.id).map((source) => source.id)
          - const totalAmountBySource = (exps) => exps.filter((exp) => exp.sourceExpensesId === source.id).reduce((acc, exp) => acc + exp.amount, 0)
          - const totalAmountByCategory = (exps) => exps.filter((exp) => sourcesOfThisCategory.includes(exp.sourceExpensesId)).reduce((acc, exp) => acc + exp.amount, 0)
          - const isNextNewCategory = source?.categoryId !== sourcesOfExpenses[i + 1]?.categoryId
          tr
            th.border-end
            td.border-end=source.name
            each month in data[queryYear]
              - const amountBySource = expensesByMonth(month).filter((exp) => exp.sourceExpensesId === source.id).reduce((acc, exp) => acc + exp.amount, 0)
              td.border-end.text-center=amountBySource
            th.border-end.text-center=totalAmountBySource(expensesByYear(queryYear))
            td.border-end.text-center=Math.round(totalAmountBySource(expensesByMonth(month)) / data[queryYear].length)
            if isNextNewCategory && category
              tr
              th.bg-light.border-end(colspan='2')=category.name
              each month in data[queryYear]
                - const amountByCategory = expensesByMonth(month).filter((exp) => sourcesOfThisCategory.includes(exp.sourceExpensesId)).reduce((acc, exp) => acc + exp.amount, 0)
                th.bg-light.border-end.text-center=amountByCategory
              th.bg-light.border-end.text-center=totalAmountByCategory(expensesByYear(queryYear))
              td.bg-light.border-end.text-center=Math.round(totalAmountByCategory(expensesByYear(queryYear)) / data[queryYear].length)
        tr.table-secondary
          th.border-end.border-light(colspan='2')='Итого:'
          each month in data[queryYear]
            - const amountTotal = expensesByMonth(month).reduce((acc, exp) => acc + exp.amount, 0)
            th.border-end.border-light.text-center=amountTotal
          - const amountTotalByYear = expensesByYear(queryYear).reduce((acc, exp) => acc + exp.amount, 0)
          th.border-end.border-light.text-center=amountTotalByYear
          th.border-end.border-light.text-center=Math.round(amountTotalByYear / data[queryYear].length)
          script(src='assets/main.js')